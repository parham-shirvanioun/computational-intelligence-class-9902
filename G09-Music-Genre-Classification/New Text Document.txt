#BCI PROJECT MUSIC GENRE CLASSIFICATION

#importing libraries
import json
import os
import math
import librosa
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow.keras as keras



DATASET_PATH = "dataset"
DATA_PATH = "json/file"
JSON_PATH = "data_10.json"

#########GETING AND EXTRACTING OUR DATASET########

#function to save all data of audios to json
def mfccToJson(dataPath, jsonPath, nMfcc=13, n_fft=2048, hop_length=512, nSegments=5):
    samples_per_segment = int( 22050 * 30 / nSegments)
    num_mfcc_vectors_per_segment = math.ceil(samples_per_segment / hop_length)
    #data is our dictionary to save information of audio like genre, labels and mfcc
    data = { "genre": [], "labels": [], "mfcc": [] }
    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dataPath)):
        #if we are in genre's folder
        if dirpath is not dataPath:
            data["genre"].append(dirpath.split("/")[-1])  #add the name of genre to our data 
            # processing music with librosa library
            for music in filenames:
                musicPath = os.path.join(dirpath, music)  #getting the path of each music
                signal, sample_rate = librosa.load(musicPath, sr=22050)   #load the music
                # process all segments of audio file
                for d in range(nSegments):
                    mfcc = (librosa.feature.mfcc(signal[(samples_per_segment * d) : (samples_per_segment * d + samples_per_segment)], sample_rate, n_mfcc=nMfcc, n_fft=n_fft, hop_length=hop_length)).T
                    if len(mfcc) == num_mfcc_vectors_per_segment:
                        data["labels"].append(i-1)
                        data["mfcc"].append(mfcc.tolist())
  
    # save all to our json file
    with open(jsonPath, "w") as fp:
        json.dump(data, fp, indent=4)
        

def load_data(data_path):
    with open(data_path, "r") as fp:
        data = json.load(fp)
    return  np.array(data["mfcc"]), np.array(data["labels"])

def prepare_datasets(test_size, validation_size):
    X, y = load_data(DATA_PATH)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)
    X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validation_size)
    return X_train, X_validation, X_test, y_train, y_validation, y_test

def plot_history(history):
    fig, axs = plt.subplots(2)
    axs[0].plot(history.history["accuracy"], label="train accuracy")
    axs[0].plot(history.history["val_accuracy"], label="test accuracy")
    axs[0].set_ylabel("Accuracy")
    axs[0].legend(loc="lower right")
    axs[0].set_title("Accuracy eval")
    axs[1].plot(history.history["loss"], label="train error")
    axs[1].plot(history.history["val_loss"], label="test error")
    axs[1].set_ylabel("Error")
    axs[1].set_xlabel("Epoch")
    axs[1].legend(loc="upper right")
    axs[1].set_title("Error eval")
    plt.show()

def predict(model, X, y):
    X = X[np.newaxis, ...]
    prediction = model.predict(X)
    predicted_index = np.argmax(prediction, axis=1)
    print("Target: {}, Predicted label: {}".format(y, predicted_index))

def build_model(input_shape):

    model = keras.Sequential()
    model.add(keras.layers.LSTM(64, input_shape=input_shape, return_sequences=True))
    model.add(keras.layers.LSTM(64))
    model.add(keras.layers.Dense(64, activation='relu'))
    model.add(keras.layers.Dropout(0.3))
    model.add(keras.layers.Dense(10, activation='softmax'))
    return model


